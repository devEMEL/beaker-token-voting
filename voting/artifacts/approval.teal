#pragma version 8
intcblock 0 1 235 1000
bytecblock 0x766f74655f636f756e74 0x766f74655f63686f696365 0x766f74655f616d6f756e74 0x766f74655f626567696e 0x766f74655f656e64 0x7265675f626567696e 0x7265675f656e64 0x796573 0x6162737461696e
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x2ff574e9 // "create(uint64,uint64,uint64,uint64)void"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x8e0d52ba // "increment_vote()void"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0xd1bd2736 // "cast_vote(string)void"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub castvote_4
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub incrementvote_3
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
btoi
store 0
txna ApplicationArgs 2
btoi
store 1
txna ApplicationArgs 3
btoi
store 2
txna ApplicationArgs 4
btoi
store 3
load 0
load 1
load 2
load 3
callsub create_2
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_1 // OptIn
==
bnz main_l12
txn OnCompletion
pushint 2 // CloseOut
==
bnz main_l11
err
main_l11:
txn ApplicationID
intc_0 // 0
!=
assert
callsub clearvote_1
intc_1 // 1
return
main_l12:
txn ApplicationID
intc_0 // 0
!=
assert
callsub register_0
intc_1 // 1
return

// register
register_0:
global Round
bytec 5 // "reg_begin"
app_global_get
>=
assert
global Round
bytec 6 // "reg_end"
app_global_get
<=
assert
txn Sender
bytec_1 // "vote_choice"
bytec 8 // "abstain"
app_local_put
txn Sender
bytec_2 // "vote_amount"
intc_0 // 0
app_local_put
retsub

// clear_vote
clearvote_1:
global Round
bytec_3 // "vote_begin"
app_global_get
>=
assert
global Round
bytec 4 // "vote_end"
app_global_get
<=
assert
txn Sender
bytec_1 // "vote_choice"
app_local_get
bytec 7 // "yes"
==
bz clearvote_1_l2
bytec_0 // "vote_count"
bytec_0 // "vote_count"
app_global_get
txn Sender
bytec_2 // "vote_amount"
app_local_get
-
app_global_put
txn Sender
bytec_2 // "vote_amount"
intc_0 // 0
app_local_put
clearvote_1_l2:
txn Sender
bytec_1 // "vote_choice"
pushbytes 0x // ""
app_local_put
retsub

// create
create_2:
store 7
store 6
store 5
store 4
bytec 5 // "reg_begin"
load 4
app_global_put
bytec 6 // "reg_end"
load 5
app_global_put
bytec_3 // "vote_begin"
load 6
app_global_put
bytec 4 // "vote_end"
load 7
app_global_put
bytec 5 // "reg_begin"
intc_0 // 0
app_global_put
bytec 6 // "reg_end"
intc_0 // 0
app_global_put
bytec_3 // "vote_begin"
intc_0 // 0
app_global_put
bytec 4 // "vote_end"
intc_0 // 0
app_global_put
bytec_0 // "vote_count"
intc_0 // 0
app_global_put
retsub

// increment_vote
incrementvote_3:
txn Sender
intc_2 // 235
asset_holding_get AssetBalance
store 9
store 8
load 9
assert
load 8
intc_3 // 1000
>=
assert
bytec_0 // "vote_count"
bytec_0 // "vote_count"
app_global_get
load 8
+
app_global_put
txn Sender
bytec_2 // "vote_amount"
load 8
app_local_put
retsub

// cast_vote
castvote_4:
store 10
global Round
bytec_3 // "vote_begin"
app_global_get
>=
assert
global Round
bytec 4 // "vote_end"
app_global_get
<=
assert
load 10
extract 2 0
bytec 7 // "yes"
==
load 10
extract 2 0
pushbytes 0x6e6f // "no"
==
||
load 10
extract 2 0
bytec 8 // "abstain"
==
||
assert
txn Sender
bytec_1 // "vote_choice"
app_local_get
bytec 7 // "yes"
==
bz castvote_4_l2
txn Sender
intc_2 // 235
asset_holding_get AssetBalance
store 12
store 11
load 12
assert
load 11
intc_3 // 1000
>=
assert
bytec_0 // "vote_count"
bytec_0 // "vote_count"
app_global_get
load 11
+
app_global_put
txn Sender
bytec_2 // "vote_amount"
load 11
app_local_put
castvote_4_l2:
txn Sender
bytec_1 // "vote_choice"
load 10
extract 2 0
app_local_put
retsub